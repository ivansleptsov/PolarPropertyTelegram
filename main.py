import os
import traceback
import re
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest
from notion_client import Client 
import html

from apscheduler.schedulers.asyncio import AsyncIOScheduler #—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–¥—Ñ 1 –≤ –Ω–µ–¥–µ–ª—é
import asyncio
import datetime
from fpdf.enums import XPos, YPos

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
NOTION_DATABASE_OBJECTS_ID = os.getenv("NOTION_DATABASE_OBJECTS_ID")
NOTION_DATABASE_REQUESTS_ID = os.getenv("NOTION_DATABASE_REQUESTS_ID")
NOTION_DATABASE_SELECTIONS_ID = os.getenv("NOTION_DATABASE_SELECTIONS_ID")
NOTION_TOKEN = os.getenv("NOTION_TOKEN")
CHANNEL_USERNAME = "@PolarProperty"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
ADMIN_IDS = os.getenv("ADMIN_IDS")
if ADMIN_IDS:
    ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]
else:
    ADMIN_IDS = []
TEST_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
notion = Client(auth=NOTION_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    photo_url = "https://drive.google.com/uc?export=view&id=1ahC8y6rmPg4tmqIUP1dTDwWmNymn9D0w"
    text = (
        " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PolarProperty Asia! \n\n"
        "üèù –ú—ã –ø–æ–º–æ–≥–∞–µ–º –∫—É–ø–∏—Ç—å –∏–ª–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ü–∞—Ç—Ç–∞–π–µ –∏ –ø–æ –≤—Å–µ–º—É –¢–∞–∏–ª–∞–Ω–¥—É.\n\n"
        "üíé –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤.  \n\n"
        "üí¨ –ü–æ–¥–±–æ—Ä ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá"
    )
    keyboard = [
        [InlineKeyboardButton("üè† –ü–æ–∫—É–ø–∫–∞", callback_data="buy_menu")],
        [InlineKeyboardButton("üè¢ –ê—Ä–µ–Ω–¥–∞", callback_data="rent_menu")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="question")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –µ—Å–ª–∏ —ç—Ç–æ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_query.message, –∏–Ω–∞—á–µ update.message
    message = getattr(update, "message", None)
    if message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message

    try:
        await message.reply_photo(photo=photo_url, caption=text, reply_markup=reply_markup)
    except Exception:
        await message.reply_text(text, reply_markup=reply_markup)

def get_back_button():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]])


async def is_user_subscribed(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}")
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        print(f"üìã –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {member.status}")
        is_subscribed = member.status in ["member", "administrator", "creator"]
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω: {is_subscribed}")
        return is_subscribed
    except BadRequest as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def get_properties():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ Notion —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict —Å –∫–ª—é—á–∞–º–∏: project_name, status, district, prices, developer,
    enddate, payments, comments, photo_url, id
    """
    try:
        response = notion.databases.query(database_id=NOTION_DATABASE_OBJECTS_ID)
        results = response.get("results", [])

        if not results:
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return None

        properties = []
        for item in results:
            try:
                props = item.get("properties", {})

                # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                project_name = props.get("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", {}).get("title", [{}])[0].get("text", {}).get("content", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                # –°—Ç–∞—Ç—É—Å –∏ —Ä–∞–π–æ–Ω
                status = props.get("–°—Ç–∞—Ç—É—Å", {}).get("select", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                district = props.get("–†–∞–π–æ–Ω", {}).get("select", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

                # –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ / rich_text
                developer_rich = props.get("–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫", {}).get("rich_text", [])
                developer = "".join([t.get("text", {}).get("content", "") for t in developer_rich]) if developer_rich else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                # –°—Ä–æ–∫ —Å–¥–∞—á–∏
                enddate = props.get("–°—Ä–æ–∫ —Å–¥–∞—á–∏", {}).get("number", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

                # –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã
                payments_rich = props.get("–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã", {}).get("rich_text", [])
                payments = "".join([t.get("text", {}).get("content", "") for t in payments_rich]) if payments_rich else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                # –û–ø–∏—Å–∞–Ω–∏–µ
                comments_rich = props.get("–û–ø–∏—Å–∞–Ω–∏–µ", {}).get("rich_text", [])
                comments = "".join([t.get("text", {}).get("content", "") for t in comments_rich]) if comments_rich else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

                # –¶–µ–Ω—ã
                prices = {
                    "studio": props.get("–°—Ç—É–¥–∏—è (THB)", {}).get("number"),
                    "1br": props.get("1BR (THB)", {}).get("number"),
                    "2br": props.get("2BR (THB)", {}).get("number"),
                    "3br": props.get("3BR (THB)", {}).get("number"),
                    "penthouse": props.get("–ü–µ–Ω—Ç—Ö–∞—É—Å (THB)", {}).get("number")
                }

                # –§–æ—Ç–æ (file / external)
                photo_url = None
                photo_field = props.get("–§–æ—Ç–æ", {}).get("files", [])
                if photo_field:
                    if "file" in photo_field[0]:
                        photo_url = fix_drive_url(photo_field[0]["file"].get("url"))
                    elif "external" in photo_field[0]:
                        photo_url = fix_drive_url(photo_field[0]["external"].get("url"))

                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "ID" (–º–æ–∂–µ—Ç –±—ã—Ç—å title/rich_text/number)
                unique_id = ""
                id_field = props.get("ID") or props.get("Id") or props.get("id")
                if id_field:
                    # try different types
                    if isinstance(id_field.get("number"), (int, float)):
                        unique_id = str(id_field.get("number"))
                    elif id_field.get("type") == "title":
                        unique_id = id_field.get("title", [{}])[0].get("text", {}).get("content", "")
                    elif id_field.get("type") == "rich_text":
                        unique_id = "".join([t.get("text", {}).get("content", "") for t in id_field.get("rich_text", [])])
                    else:
                        # fallback: try common keys
                        for k in ("plain_text", "text", "content"):
                            v = id_field.get(k)
                            if v:
                                unique_id = v
                                break

                properties.append({
                    "project_name": project_name,
                    "status": status,
                    "district": district,
                    "prices": prices,
                    "developer": developer,
                    "enddate": enddate,
                    "payments": payments,
                    "comments": comments,
                    "photo_url": photo_url,
                    "id": unique_id,
                    "raw": item
                })

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
                continue

        return properties

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Notion: {e}")
        return None
        
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "buy_menu":
        keyboard = [
            [InlineKeyboardButton("üìÇ –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤", callback_data="catalog")],
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ PDF", callback_data="download_pdf")],
            [InlineKeyboardButton("üì© –ü–æ–¥–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data="selection")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "üè† –ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
            reply_markup=reply_markup
        )
        return

    elif query.data == "rent_menu":
        wa_msg = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞—Ä–µ–Ω–¥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ."
        wa_msg_encoded = wa_msg.replace(" ", "%20")

        contact_text = (
            "üëã –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É –∞—Ä–µ–Ω–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:\n\n"
            "üë©‚Äçüíº –õ—é–±–æ–≤—å\n"
            f"‚úàÔ∏è  Tg: @lyubov_danilove\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79644229573?text={wa_msg_encoded}\">+7 964 422 95 73 (WhatsApp)</a>\n"
            f"üáπüá≠  <a href=\"https://wa.me/66968300106?text={wa_msg_encoded}\">+66 96 830 01 06 (WhatsApp)</a>\n\n"
            "üë©‚Äçüíº –ù–∞–¥–µ–∂–¥–∞ \n"
            f"‚úàÔ∏è  Tg: @mandarinka_nadya\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79241713616?text={wa_msg_encoded}\">+7 924 171 36 16 (WhatsApp)</a>\n"
            
        )
        await query.message.reply_text(
            contact_text,
            reply_markup=get_back_button(),
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        return

    elif query.data == "selection":
        user_state[query.from_user.id] = {"step": 0, "data": {}, "type": "selection"}
        await query.message.reply_text(
            SELECTION_QUESTIONS[0],
            reply_markup=get_back_button()
        )
        return

    elif query.data == "question":
        
        contact_text = (
            "üëã –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:\n\n"
            "üë©‚Äçüíº –õ—é–±–æ–≤—å\n"
            f"‚úàÔ∏è  Tg: @lyubov_danilove\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79644229573\">+7 964 422 95 73 (WhatsApp)</a>\n"
            f"üáπüá≠  <a href=\"https://wa.me/66968300106\">+66 96 830 01 06 (WhatsApp)</a>\n\n"
            "üë©‚Äçüíº –ù–∞–¥–µ–∂–¥–∞ \n"
            f"‚úàÔ∏è  Tg: @mandarinka_nadya\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79241713616\">+7 924 171 36 16 (WhatsApp)</a>\n"            
        )
        await query.message.reply_text(
            contact_text,
            reply_markup=get_back_button(),
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        return

    elif query.data == "contact":        
        contact_text = (
            " –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "‚úàÔ∏è Telegram: <a href=\"https://t.me/PolarProperty\">@PolarProperty</a>\n"
            "üì∑ Instagram: <a href=\"https://www.instagram.com/polar.property/\">@Polar.Property</a>\n"
            "üí¨ WhatsApp: <a href=\"https://wa.me/66968300106\"> –ù–∞–ø–∏—Å–∞—Ç—å</a>\n"
            "üìû +66 96 830 01 06\n"
            "üìç –ü–∞—Ç—Ç–∞–π—è, –¢–∞–∏–ª–∞–Ω–¥\n"
            "üíô –ú—ã –Ω–∞ —Å–≤—è–∑–∏ 24/7"

        )
        await query.message.reply_text(
            contact_text,
            reply_markup=get_back_button(),
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        return

    elif query.data == "about":
        about_photo = "https://drive.google.com/uc?export=view&id=120dGw098edD-hVUClSX68VtTaaYODQng"
        contact_text = (
            "üè¢ PolarProperty Asia ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –≤–µ–¥—É—â–∏—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –¢–∞–∏–ª–∞–Ω–¥–∞.\n"  
            "‚úÖ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
            "‚úÖ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º —Å–¥–µ–ª–∫—É –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö\n"
            "‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã\n"
        )
        await query.message.reply_photo(
            photo=about_photo,
            caption=contact_text,
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return


    elif query.data.startswith("catalog"):
        parts = query.data.split("_")
        page = int(parts[1]) if len(parts) > 1 else 0

        is_subscribed = TEST_MODE or await is_user_subscribed(query.from_user.id, context)
        if is_subscribed:
            properties = await get_properties()
            if not properties:
                await query.message.reply_text(
                    "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                    reply_markup=get_back_button()
                )
                return

            total = len(properties)
            end = min(page + PAGE_SIZE, total)
            for idx in range(page, end):
                prop = properties[idx]
                short_text = (
                    f"<b>{escape_html(prop['project_name'])}</b>\n"
                    f"üìç –†–∞–π–æ–Ω: {escape_html(prop['district'])}\n"
                    f"üèó –°—Ç–∞—Ç—É—Å: {escape_html(prop['status'])}\n"
                    f"üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {escape_html(prop['enddate'])}"
                )
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîé –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"object_{idx}")],
                ])
                if prop.get("photo_url"):
                    await query.message.reply_photo(
                        photo=prop["photo_url"],
                        caption=short_text,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                else:
                    await query.message.reply_text(
                        short_text,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )

            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            nav_buttons = []
            nav_buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu"))
            if end < total:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ", callback_data=f"catalog_{end}"))
            reply_markup = InlineKeyboardMarkup([nav_buttons])
            await query.message.reply_text(
                f"–ü–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã {page+1}-{end} –∏–∑ {total}.",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="catalog_0")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                f"‚ùóÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                reply_markup=reply_markup
            )
            return
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É object_{idx} –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    elif query.data.startswith("object_"):
        idx = int(query.data.split("_")[1])
        properties = await get_properties()
        if not properties or idx >= len(properties):
            await query.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_button())
            return
        prop = properties[idx]
        prices = prop['prices']
        detail_text = (
            f"<b>{escape_html(prop['project_name'])}</b>\n"
            f"üìç –†–∞–π–æ–Ω: {escape_html(prop['district'])}\n"
            f"üèó –°—Ç–∞—Ç—É—Å: {escape_html(prop['status'])}\n"
            f"üè¢ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: {escape_html(prop['developer'])}\n"
            f"üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {escape_html(prop['enddate'])}\n"
            f"üí∞ –¶–µ–Ω—ã:\n"
            f"   - –°—Ç—É–¥–∏—è: –æ—Ç {escape_html(format_price(prices['studio']))} THB\n"
            f"   - 1BR: –æ—Ç {escape_html(format_price(prices['1br']))} THB\n"
            f"   - 2BR: –æ—Ç {escape_html(format_price(prices['2br']))} THB\n"
            f"   - 3BR: –æ—Ç {escape_html(format_price(prices['3br']))} THB\n"
            f"   - –ü–µ–Ω—Ç—Ö–∞—É—Å: –æ—Ç {escape_html(format_price(prices['penthouse']))} THB\n"
            f"üí≥ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: –ü–æ –∑–∞–ø—Ä–æ—Å—É\n" #{escape_html(prop['payments'])}
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape_html(prop['comments'])}\n"
        )
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ñπüì¨ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"request_{idx+1}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="catalog_0")]
        ])
        if prop.get("photo_url"):
            await query.message.reply_photo(
                photo=prop["photo_url"],
                caption=detail_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            await query.message.reply_text(
                detail_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )

    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É callback_data –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç
    elif query.data.startswith("request_"):
        try:
            idx = int(query.data.split("_")[1]) - 1
            properties = await get_properties()
            if not properties or idx >= len(properties):
                await query.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_button())
                return
            prop = properties[idx]
            user_id = query.from_user.id
            user_name = query.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = query.from_user.username or "–±–µ–∑ username"
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_message = (
                "üì• –ó–ê–Ø–í–ö–ê –ù–ê –û–ë–™–ï–ö–¢\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"üè† –û–±—ä–µ–∫—Ç: {prop['project_name']}\n"                
            )
            if ADMIN_IDS:
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(chat_id=admin_id, text=admin_message)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            await add_request_to_notion(user_name, username, user_id, prop)
            await query.message.reply_text(
                "üßë‚Äçüíº –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.\n\n"
                "–ú—ã –ø–æ–¥–±–µ—Ä—ë–º –¥–ª—è –≤–∞—Å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_back_button()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await query.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_button()
            )
    elif query.data == "download_pdf":
        is_subscribed = TEST_MODE or await is_user_subscribed(query.from_user.id, context)
        if not is_subscribed:
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="download_pdf")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                f"‚ùóÔ∏è –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                reply_markup=reply_markup
            )
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        await query.message.reply_text(
            "‚è≥ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=get_back_button()
        )

        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è), —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
            if not os.path.exists(PDF_PATH):
                properties = await get_properties()
                if not properties:
                    await query.message.reply_text(
                        "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞",
                        reply_markup=get_back_button()
                    )
                    return
                await create_catalog_pdf(properties, PDF_PATH)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            with open(PDF_PATH, "rb") as pdf_file:
                await query.message.reply_document(
                    document=pdf_file,
                    filename="–ö–∞—Ç–∞–ª–æ–≥ PolarProperty.pdf",
                    caption="üìã –í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º.",
                    reply_markup=get_back_button()
                )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_button()
            )
        return
    elif query.data == "menu":
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º start
        try:
            if update.callback_query:
                await update.callback_query.message.delete()
            await start(update, context)
        except BadRequest:
            # await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            await query.message.reply_text("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /start:")
        return
   
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—è–≤–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã)"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = update.message.from_user.username or "–±–µ–∑ username"
    state = user_state.get(user_id)

    # --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ ---
    if isinstance(state, dict) and state.get("type") == "selection":
        step = state.get("step", 0)
        data = state.get("data", {})
        data[SELECTION_STEPS[step]] = update.message.text
        step += 1

        if step < len(SELECTION_QUESTIONS):
            user_state[user_id] = {"step": step, "data": data, "type": "selection"}
            await update.message.reply_text(
                SELECTION_QUESTIONS[step],
                reply_markup=get_back_button()
            )
        else:
            # –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            user_state[user_id] = None
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
            msg = (
                "üì© –ê–ù–ö–ï–¢–ê –ù–ê –ü–û–î–ë–û–† –ö–í–ê–†–¢–ò–†–´\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"1Ô∏è‚É£ –ò–º—è: {data.get('name')}\n"
                f"2Ô∏è‚É£ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                f"3Ô∏è‚É£ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {data.get('type')}\n"
                f"4Ô∏è‚É£ –†–∞–π–æ–Ω/–≥–æ—Ä–æ–¥: {data.get('location')}\n"
                f"5Ô∏è‚É£ –ë—é–¥–∂–µ—Ç: {data.get('budget')}\n"
            )
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_back_button()
            )
            if ADMIN_IDS:
                try:
                    for admin_id in ADMIN_IDS:
                        await context.bot.send_message(chat_id=admin_id, text=msg)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∞–¥–º–∏–Ω—É: {e}")
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Notion (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞)
            await add_selection_to_notion(user_name, username, user_id, data)
        return

    
    if state:
        user_state[user_id] = None

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    print(f"Exception while handling an update: {context.error}")
    print(f"Traceback: {traceback.format_exc()}")

def format_price(price):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏"""
    if price is None:
        return "‚Äî"
    return f"{int(price):,}".replace(",", " ")

def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML"""
    return html.escape(str(text))

async def add_request_to_notion(user_name, username, user_id, prop):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É Notion"""
    from datetime import datetime
    try:
        notion.pages.create(
            parent={"database_id": NOTION_DATABASE_REQUESTS_ID},  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫
            properties={
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": {
                    "title": [{"text": {"content": user_name}}]
                },
                "Username": {
                    "rich_text": [{"text": {"content": username}}]
                },
                "UserID": {
                    "rich_text": [{"text": {"content": str(user_id)}}]
                },
                "–û–±—ä–µ–∫—Ç": {
                    "rich_text": [{"text": {"content": prop.get('project_name', '')}}]
                },
                "ID –æ–±—ä–µ–∫—Ç–∞": {
                    "rich_text": [{"text": {"content": str(prop.get('id', ''))}}]
                },
                "–ò—Å—Ç–æ—á–Ω–∏–∫": {
                    "rich_text": [{"text": {"content": "—Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç"}}]
                },
                "–¢–∏–ø —Å–¥–µ–ª–∫–∏": {
                    "rich_text": [{"text": {"content": "–ü—Ä–æ–¥–∞–∂–∞"}}]
                },
                "–î–∞—Ç–∞": {
                    "date": {"start": datetime.now().isoformat()}
                }
            }
        )
        print("‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Notion")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Notion: {e}")

def fix_drive_url(url):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Å—ã–ª–∫—É Google Drive –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if not url:
        return url
    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if "drive.google.com/uc?export=view&id=" in url:
        return url
    # –ò—â–µ–º FILE_ID –≤ —Å—Å—ã–ª–∫–µ
    match = re.search(r'drive\.google\.com\/file\/d\/([^\/]+)', url)
    if match:
        file_id = match.group(1)
        return f"https://drive.google.com/uc?export=view&id={file_id}"
    return url

def oneline(text):
    """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ pdf.cell"""
    return str(text).replace('\n', ' ').replace('\r', ' ')

def cleanup_temp_files():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    import glob
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for file in glob.glob("temp_img_*.jpg"):
            os.remove(file)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ PDF
        for file in glob.glob("catalog_*.pdf"):
            os.remove(file)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF


async def create_catalog_pdf(properties, pdf_path):
    from fpdf import FPDF

    pdf = FPDF()
    pdf.add_page()
    pdf.add_font('DejaVu', '', 'fonts/DejaVuSans.ttf')
    pdf.add_font('DejaVu', 'B', 'fonts/DejaVuSans-Bold.ttf')
    pdf.set_font("DejaVu", size=12)
    pdf.cell(200, 10, text="–ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤ PolarProperty", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align="C")
    pdf.ln(10)

    for idx, prop in enumerate(properties, 1):
        # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        pdf.set_font("DejaVu", 'B', size=12)
        pdf.cell(0, 10, text=f"{idx}. {oneline(prop['project_name'])}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.ln(3)

        # –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
        if prop.get("photo_url"):
            import requests
            try:
                img_data = requests.get(prop["photo_url"], timeout=10).content
                img_path = f"temp_img_{idx}.jpg"
                with open(img_path, "wb") as handler:
                    handler.write(img_data)
                pdf.image(img_path, w=60)
                os.remove(img_path)
                pdf.ln(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF: {e}")
                pdf.ln(5)

        # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
        pdf.set_font("DejaVu", size=11)
        pdf.cell(0, 8, text=f"–†–∞–π–æ–Ω: {oneline(prop['district'])}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"–°—Ç–∞—Ç—É—Å: {oneline(prop['status'])}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: {oneline(prop['developer'])}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {oneline(prop['enddate'])}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        prices = prop['prices']
        pdf.cell(0, 8, text=f"–¶–µ–Ω—ã:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   - –°—Ç—É–¥–∏—è: –æ—Ç {format_price(prices['studio'])} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   - 1BR: –æ—Ç {format_price(prices['1br'])} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   - 2BR: –æ—Ç {format_price(prices['2br'])} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   - 3BR: –æ—Ç {format_price(prices['3br'])} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   - –ü–µ–Ω—Ç—Ö–∞—É—Å: –æ—Ç {format_price(prices['penthouse'])} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        # pdf.cell(0, 8, text=f"–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {oneline(prop['payments'])}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º multi_cell –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        comments = str(prop['comments']).replace('\r\n', '\n').replace('\r', '\n')
        pdf.multi_cell(0, 8, text=f"–û–ø–∏—Å–∞–Ω–∏–µ: {comments}")
        pdf.ln(3)

    pdf.output(pdf_path)
# --- –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤ Notion ---
async def add_selection_to_notion(user_name, username, user_id, data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –Ω–∞ –ø–æ–¥–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—É Notion"""
    from datetime import datetime
    try:
        notion.pages.create(
            parent={"database_id": NOTION_DATABASE_SELECTIONS_ID},  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∫–µ—Ç
            properties={
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": {
                    "title": [{"text": {"content": user_name}}]
                },
                "Username": {
                    "rich_text": [{"text": {"content": username}}]
                },
                "UserID": {
                    "rich_text": [{"text": {"content": str(user_id)}}]
                },
                "–ò–º—è": {
                    "rich_text": [{"text": {"content": data.get("name", "")}}]
                },
                "–¢–µ–ª–µ—Ñ–æ–Ω": {
                    "rich_text": [{"text": {"content": data.get("phone", "")}}]
                },
                "–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏": {
                    "rich_text": [{"text": {"content": data.get("type", "")}}]
                },
                "–†–∞–π–æ–Ω/–≥–æ—Ä–æ–¥": {
                    "rich_text": [{"text": {"content": data.get("location", "")}}]
                },
                "–ë—é–¥–∂–µ—Ç": {
                    "rich_text": [{"text": {"content": data.get("budget", "")}}]
                },
                "–î–∞—Ç–∞": {
                    "date": {"start": datetime.now().isoformat()}
                }
            }
        )
        print("‚úÖ –ê–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Notion")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤ Notion: {e}")
PDF_PATH = "catalog.pdf"

async def scheduled_update_pdf():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π PDF –∫–∞—Ç–∞–ª–æ–≥ (–¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    print("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PDF –∫–∞—Ç–∞–ª–æ–≥–∞...")
    properties = await get_properties()
    if properties:
        try:
            await create_catalog_pdf(properties, PDF_PATH)
            print("‚úÖ PDF –∫–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PDF: {e}")
    else:
        print("‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è PDF")
        
async def on_startup(app):
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    cleanup_temp_files()
    
    if not TEST_MODE:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π PDF (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è)
        try:
            await scheduled_update_pdf()
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π PDF: {e}")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            scheduler = AsyncIOScheduler(timezone="UTC")
            scheduler.add_job(
                lambda: asyncio.create_task(scheduled_update_pdf()), 
                "cron", 
                day_of_week="mon", 
                hour=10, 
                minute=0
            )
            scheduler.start()
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    else:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PDF –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω—ã")    
# --- –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∫–µ—Ç—ã ---
SELECTION_STEPS = [
    "name",
    "phone",
    "type",
    "location",
    "budget"
]
SELECTION_QUESTIONS = [
    "1Ô∏è‚É£ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    "2Ô∏è‚É£ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã)?",
    "3Ô∏è‚É£ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º, –≤–∏–ª–ª–∞?",
    "4Ô∏è‚É£ –†–∞–π–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ?",
    "5Ô∏è‚É£ –í–∞—à –±—é–¥–∂–µ—Ç?"
]

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()
    app.add_error_handler(error_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

