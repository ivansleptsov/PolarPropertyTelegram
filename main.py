import os
import traceback
import re
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest
from notion_client import Client 
import html

from apscheduler.schedulers.asyncio import AsyncIOScheduler #—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–¥—Ñ 1 –≤ –Ω–µ–¥–µ–ª—é
import asyncio
import datetime
from fpdf.enums import XPos, YPos

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
NOTION_DATABASE_OBJECTS_ID = os.getenv("NOTION_DATABASE_OBJECTS_ID")
NOTION_DATABASE_REQUESTS_ID = os.getenv("NOTION_DATABASE_REQUESTS_ID")
NOTION_DATABASE_SELECTIONS_ID = os.getenv("NOTION_DATABASE_SELECTIONS_ID")
NOTION_TOKEN = os.getenv("NOTION_TOKEN")
CHANNEL_USERNAME = "@PolarProperty"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
ADMIN_IDS = os.getenv("ADMIN_IDS")
if ADMIN_IDS:
    ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]
else:
    ADMIN_IDS = []
TEST_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
notion = Client(auth=NOTION_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ ID ---
CANDIDATE_EXT_ID_KEYS = [
    'id','ID','Id','‚Ññ','No','–ù–æ–º–µ—Ä','–ù–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞','ID –æ–±—ä–µ–∫—Ç–∞','Id –æ–±—ä–µ–∫—Ç–∞','Id –û–±—ä–µ–∫—Ç–∞',
    'ID –æ–±—å–µ–∫—Ç–∞','Id –æ–±—å–µ–∫—Ç–∞','Object ID','ObjectId','External ID','External Id'
]

def format_notion_property(pv: dict) -> str:
    """–ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ Notion —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞: title, rich_text, select, multi_select, number, url, email, phone_number,
    unique_id, formula, rollup, date. –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
    """
    if not pv or not isinstance(pv, dict):
        return ''
    ptype = pv.get('type')
    try:
        if ptype == 'title':
            return ''.join([(t.get('plain_text') or t.get('text', {}).get('content','') or '') for t in pv.get('title', [])]).strip()
        if ptype == 'rich_text':
            return ''.join([(t.get('plain_text') or t.get('text', {}).get('content','') or '') for t in pv.get('rich_text', [])]).strip()
        if ptype == 'select':
            return (pv.get('select') or {}).get('name','') or ''
        if ptype == 'multi_select':
            return ', '.join([o.get('name','') for o in pv.get('multi_select', []) if o.get('name')]).strip()
        if ptype == 'number':
            return '' if pv.get('number') is None else str(pv.get('number'))
        if ptype in ('url','email','phone_number'):
            return pv.get(ptype) or ''
        if ptype == 'unique_id':
            u = pv.get('unique_id') or {}
            num = u.get('number')
            if num is None:
                return ''
            prefix = u.get('prefix') or ''
            return f"{prefix}-{num}" if prefix else str(num)
        if ptype == 'formula':
            f = pv.get('formula') or {}
            ftype = f.get('type')
            if ftype == 'string':
                return f.get('string') or ''
            if ftype == 'number':
                return '' if f.get('number') is None else str(f.get('number'))
            if ftype == 'boolean':
                return '' if f.get('boolean') is None else ('true' if f.get('boolean') else 'false')
            if ftype == 'date':
                d = f.get('date') or {}
                return d.get('start') or ''
            return ''
        if ptype == 'rollup':
            r = pv.get('rollup') or {}
            rtype = r.get('type')
            if rtype == 'number':
                return '' if r.get('number') is None else str(r.get('number'))
            if rtype == 'date':
                d = r.get('date') or {}
                return d.get('start') or ''
            if rtype == 'array':
                parts = []
                for inner in r.get('array', []):
                    parts.append(format_notion_property(inner))
                return ', '.join([p for p in parts if p.strip()]).strip()
            return ''
        if ptype == 'date':
            d = pv.get('date') or {}
            return d.get('start') or ''
        # fallback –ø–æ–ø—ã—Ç–∫–∞ plain_text
        inner = pv.get(ptype)
        if isinstance(inner, dict):
            if isinstance(inner.get('plain_text'), str):
                return inner.get('plain_text')
            if inner.get('text') and isinstance(inner.get('text'), dict):
                return inner.get('text', {}).get('content','') or ''
        return ''
    except Exception:
        return ''

def extract_external_id(page_properties: dict) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π extId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–Ω—ã—Ö –ø–æ–ª–µ–π.
    –ê–ª–≥–æ—Ä–∏—Ç–º: –ø—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ -> lowercase fallback. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç '' –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    if not page_properties or not isinstance(page_properties, dict):
        return ''
    lower_map = {k.lower(): k for k in page_properties.keys()}

    # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
    for cand in CANDIDATE_EXT_ID_KEYS:
        if cand in page_properties:
            val = format_notion_property(page_properties[cand]).strip()
            if val:
                return val
    # Fallback —á–µ—Ä–µ–∑ lower_map
    for cand in CANDIDATE_EXT_ID_KEYS:
        key = lower_map.get(cand.lower())
        if key:
            val = format_notion_property(page_properties[key]).strip()
            if val:
                return val
    return ''

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    photo_url = "https://drive.google.com/uc?export=view&id=1pQQvZyx_th1rUK6dbyhvrS1P03S0Uk8W"
    text = (
        " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PolarProperty Asia! \n\n"
        "üèù –ú—ã –ø–æ–º–æ–≥–∞–µ–º –∫—É–ø–∏—Ç—å –∏–ª–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ü–∞—Ç—Ç–∞–π–µ –∏ –ø–æ –≤—Å–µ–º—É –¢–∞–∏–ª–∞–Ω–¥—É.\n\n"
        "üíé –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤.  \n\n"
        "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá"
    )
    keyboard = [
        [InlineKeyboardButton("üè† –ü–æ–∫—É–ø–∫–∞", callback_data="buy_menu")],
        [InlineKeyboardButton("üè¢ –ê—Ä–µ–Ω–¥–∞", callback_data="rent_menu")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="question")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –µ—Å–ª–∏ —ç—Ç–æ callback, –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_query.message, –∏–Ω–∞—á–µ update.message
    message = getattr(update, "message", None)
    if message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message

    try:
        await message.reply_photo(photo=photo_url, caption=text, reply_markup=reply_markup)
    except Exception:
        await message.reply_text(text, reply_markup=reply_markup)

def get_back_button():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]])


async def is_user_subscribed(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}")
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        print(f"üìã –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {member.status}")
        is_subscribed = member.status in ["member", "administrator", "creator"]
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω: {is_subscribed}")
        return is_subscribed
    except BadRequest as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def get_properties():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑ Notion –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π extId. –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ."""
    try:
        response = notion.databases.query(database_id=NOTION_DATABASE_OBJECTS_ID)
        results = response.get("results", [])
        if not results:
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return None
        properties = []
        for item in results:
            try:
                props = item.get('properties', {})
                # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
                title_prop = props.get('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞') or props.get('–ù–∞–∑–≤–∞–Ω–∏–µ') or props.get('Title')
                project_name = format_notion_property(title_prop) or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                status = (props.get('–°—Ç–∞—Ç—É—Å', {}) or {}).get('select', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                district = (props.get('–†–∞–π–æ–Ω', {}) or {}).get('select', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                developer = ''.join([t.get('text', {}).get('content','') for t in (props.get('–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫', {}) or {}).get('rich_text', [])]) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                enddate = (props.get('–°—Ä–æ–∫ —Å–¥–∞—á–∏', {}) or {}).get('number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                status_lower = (status or '').lower()
                if any(k in status_lower for k in ("—Å–¥–∞–Ω","—Å–¥–∞—á–∞","–≥–æ—Ç–æ–≤–æ","completed","ready")):
                    payments = '–ø–æ –∑–∞–ø—Ä–æ—Å—É'
                else:
                    payments = '—Ä–∞—Å—Å—Ä–æ—á–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'
                comments = ''.join([t.get('text', {}).get('content','') for t in (props.get('–û–ø–∏—Å–∞–Ω–∏–µ', {}) or {}).get('rich_text', [])]) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                prices = {
                    'studio': (props.get('–°—Ç—É–¥–∏—è (THB)', {}) or {}).get('number'),
                    '1br': (props.get('1BR (THB)', {}) or {}).get('number'),
                    '2br': (props.get('2BR (THB)', {}) or {}).get('number'),
                    '3br': (props.get('3BR (THB)', {}) or {}).get('number'),
                    'penthouse': (props.get('–ü–µ–Ω—Ç—Ö–∞—É—Å (THB)', {}) or {}).get('number')
                }

                # –§–æ—Ç–æ: –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ Google Drive external-—Å—Å—ã–ª–∫–∏, Notion-uploaded –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                photo_url = None
                photo_field = (props.get('–§–æ—Ç–æ', {}) or {}).get('files', [])
                if photo_field:
                    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî external —Å—Å—ã–ª–∫–∏ Drive
                    for f in photo_field:
                        url = (f.get('external') or {}).get('url')
                        if url and is_drive_url(url):
                            photo_url = fix_drive_url(url)
                            break
                    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–∏ external, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å 'file' —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ Drive (–æ–±—ã—á–Ω–æ –Ω–µ—Ç)
                    if not photo_url:
                        for f in photo_field:
                            url = (f.get('file') or {}).get('url')
                            if url and is_drive_url(url):
                                photo_url = fix_drive_url(url)
                                break

                ext_id = extract_external_id(props)
                if ext_id:
                    print("Parsed extId", item.get('id'), project_name, ext_id)
                else:
                    print("ID not found", item.get('id'), list(props.keys()))
                properties.append({
                    'project_name': project_name,
                    'status': status,
                    'district': district,
                    'prices': prices,
                    'developer': developer,
                    'enddate': enddate,
                    'payments': payments,
                    'comments': comments,
                    'photo_url': photo_url,  # —Ç–æ–ª—å–∫–æ Drive –∏–ª–∏ None
                    'extId': ext_id,
                    'page_id': item.get('id'),
                    'raw': item
                })
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")
                continue
        return properties
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Notion: {e}")
        return None

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –û—Ç–≤–µ—Ç –Ω–∞ callback: –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ/–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ callback'—ã
    try:
        await query.answer()
    except BadRequest as e:
        err = str(e)
        if any(x in err for x in ("Query is too old","query id is invalid","response timeout")):
            print(f"‚ö†Ô∏è Callback expired or invalid: {e}")
        else:
            raise

    if query.data == "buy_menu":
        keyboard = [
            [InlineKeyboardButton("üìÇ –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤", callback_data="catalog")],
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ PDF", callback_data="download_pdf")],
            [InlineKeyboardButton("üì© –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="selection")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
        ]
        await query.message.reply_text("üè† –ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    elif query.data == "rent_menu":
       
        contact_text = (
            "üëã –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É –∞—Ä–µ–Ω–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:\n\n"
            "üë©‚Äçüíº –õ—é–±–æ–≤—å\n"
            f"‚úàÔ∏è  Tg: @lyubov_danilove\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79644229573\">+7 964 422 95 73 (WhatsApp)</a>\n"
            f"üáπüá≠  <a href=\"https://wa.me/66968300106\">+66 96 830 01 06 (WhatsApp)</a>\n\n"
            "üë®‚Äçüíº –ü–∞–≤–µ–ª\n"
            f"‚úàÔ∏è  Tg: @Pash_Danilov\n"
            f"üáπüá≠  <a href=\"https://wa.me/66838089908\">+66 83 808 9908 (WhatsApp)</a>\n\n"
            "üë©‚Äçüíº –ù–∞–¥–µ–∂–¥–∞ \n"
            f"‚úàÔ∏è  Tg: @mandarinka_nadya\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79241713616\">+7 924 171 36 16 (WhatsApp)</a>\n\n"    
            "üë®‚Äçüíº –ò–≤–∞–Ω \n"
            f"‚úàÔ∏è  Tg: @Sleptsov_Ivan\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79143083827\">+7 914 308 38 27 (WhatsApp)</a>\n"
            
        )
        await query.message.reply_text(
            contact_text,
            reply_markup=get_back_button(),
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        return

    elif query.data == "selection":
        user_state[query.from_user.id] = {"step": 0, "data": {}, "type": "selection"}
        await query.message.reply_text(
            SELECTION_QUESTIONS[0],
            reply_markup=get_back_button()
        )
        return

    elif query.data == "question":
        
        contact_text = (
            "üëã –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:\n\n"
            "üë©‚Äçüíº –õ—é–±–æ–≤—å\n"
            f"‚úàÔ∏è  Tg: @lyubov_danilove\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79644229573\">+7 964 422 95 73 (WhatsApp)</a>\n"
            f"üáπüá≠  <a href=\"https://wa.me/66968300106\">+66 96 830 01 06 (WhatsApp)</a>\n\n"
            "üë®‚Äçüíº –ü–∞–≤–µ–ª\n"
            f"‚úàÔ∏è  Tg: @Pash_Danilov\n"
            f"üáπüá≠  <a href=\"https://wa.me/66838089908\">+66 83 808 9908 (WhatsApp)</a>\n\n"
            "üë©‚Äçüíº –ù–∞–¥–µ–∂–¥–∞ \n"
            f"‚úàÔ∏è  Tg: @mandarinka_nadya\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79241713616\">+7 924 171 36 16 (WhatsApp)</a>\n\n"    
            "üë®‚Äçüíº –ò–≤–∞–Ω \n"
            f"‚úàÔ∏è  Tg: @Sleptsov_Ivan\n"
            f"üá∑üá∫ <a href=\"https://wa.me/79143083827\">+7 914 308 38 27 (WhatsApp)</a>\n"           
        )
        await query.message.reply_text(
            contact_text,
            reply_markup=get_back_button(),
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        return

    elif query.data == "contact":        
        contact_text = (
            " –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "‚úàÔ∏è Telegram: <a href=\"https://t.me/PolarProperty\">@PolarProperty</a>\n"
            "üì∑ Instagram: <a href=\"https://www.instagram.com/polar.property/\">@Polar.Property</a>\n"
            "üí¨ WhatsApp: <a href=\"https://wa.me/66968300106\"> –ù–∞–ø–∏—Å–∞—Ç—å</a>\n"
            "üìû +66 96 830 01 06\n"
            "üìç –ü–∞—Ç—Ç–∞–π—è, –¢–∞–∏–ª–∞–Ω–¥\n"
            "üíô –ú—ã –Ω–∞ —Å–≤—è–∑–∏ 24/7"

        )
        await query.message.reply_text(
            contact_text,
            reply_markup=get_back_button(),
            disable_web_page_preview=True,
            parse_mode="HTML"
        )
        return

    elif query.data == "about":
        about_photo = "https://drive.google.com/uc?export=view&id=120dGw098edD-hVUClSX68VtTaaYODQng"
        contact_text = (
            "üè¢ PolarProperty Asia ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –≤–µ–¥—É—â–∏—Ö –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –¢–∞–∏–ª–∞–Ω–¥–∞.\n"  
            "‚úÖ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
            "‚úÖ –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º —Å–¥–µ–ª–∫—É –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö\n"
            "‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã\n"
        )
        await query.message.reply_photo(
            photo=about_photo,
            caption=contact_text,
            reply_markup=get_back_button(),
            parse_mode="HTML"
        )
        return


    elif query.data.startswith("catalog"):
        parts = query.data.split("_")
        page = int(parts[1]) if len(parts) > 1 else 0

        is_subscribed = TEST_MODE or await is_user_subscribed(query.from_user.id, context)
        if is_subscribed:
            properties = await get_properties()
            if not properties:
                await query.message.reply_text(
                    "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
                    reply_markup=get_back_button()
                )
                return

            total = len(properties)
            end = min(page + PAGE_SIZE, total)
            for idx in range(page, end):
                prop = properties[idx]
                short_text = (
                    f"<b>{escape_html(prop['project_name'])}</b>\n"
                    f"üìç –†–∞–π–æ–Ω: {escape_html(prop['district'])}\n"
                    f"üèó –°—Ç–∞—Ç—É—Å: {escape_html(prop['status'])}\n"
                    f"üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {escape_html(prop['enddate'])}"
                )
                if prop.get('extId'):
                    short_text += f"\nüîñ ID: {escape_html(prop['extId'])}"
                reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîé –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"object_{idx}")]])
                if prop.get("photo_url"):
                    await query.message.reply_photo(
                        photo=prop["photo_url"],
                        caption=short_text,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                else:
                    await query.message.reply_text(
                        short_text,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )

            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            nav_buttons = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            if end < total:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ", callback_data=f"catalog_{end}"))
            await query.message.reply_text(
                f"–ü–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã {page+1}-{end} –∏–∑ {total}.",
                reply_markup=InlineKeyboardMarkup([nav_buttons])
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="catalog_0")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]
            await query.message.reply_text(
                f"‚ùóÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É object_{idx} –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    elif query.data.startswith("object_"):
        idx = int(query.data.split("_")[1])
        properties = await get_properties()
        if not properties or idx >= len(properties):
            await query.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_button())
            return
        prop = properties[idx]
        prices = prop['prices']
        detail_text = (
            f"<b>{escape_html(prop['project_name'])}</b>\n"
            f"üìç –†–∞–π–æ–Ω: {escape_html(prop['district'])}\n"
            f"üèó –°—Ç–∞—Ç—É—Å: {escape_html(prop['status'])}\n"
            f"üè¢ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫: {escape_html(prop['developer'])}\n"
            f"üìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {escape_html(prop['enddate'])}\n"
        )
        if prop.get('extId'):
            detail_text += f"üîñ ID: {escape_html(prop['extId'])}\n"
        detail_text += (
            f"üí∞ –¶–µ–Ω—ã:\n"
            f"   - –°—Ç—É–¥–∏—è: –æ—Ç {escape_html(format_price(prices['studio']))} THB\n"
            f"   - 1BR: –æ—Ç {escape_html(format_price(prices['1br']))} THB\n"
            f"   - 2BR: –æ—Ç {escape_html(format_price(prices['2br']))} THB\n"
            f"   - 3BR: –æ—Ç {escape_html(format_price(prices['3br']))} THB\n"
            f"   - –ü–µ–Ω—Ç—Ö–∞—É—Å: –æ—Ç {escape_html(format_price(prices['penthouse']))} THB\n"
            f"üí≥ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {escape_html(prop.get('payments','–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {escape_html(prop['comments'])}\n"
        )
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ñπüì¨ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"request_{idx+1}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="catalog_0")]
        ])
        if prop.get("photo_url"):
            await query.message.reply_photo(
                photo=prop["photo_url"],
                caption=detail_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            await query.message.reply_text(
                detail_text,
                parse_mode="HTML",
                reply_markup=reply_markup
            )

    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É callback_data –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç
    elif query.data.startswith("request_"):
        try:
            idx = int(query.data.split("_")[1]) - 1
            properties = await get_properties()
            if not properties or idx >= len(properties):
                await query.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_button())
                return
            prop = properties[idx]
            user_id = query.from_user.id
            user_name = query.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            username = query.from_user.username or "–±–µ–∑ username"
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_message = (
                "üì• –ó–ê–Ø–í–ö–ê –ù–ê –û–ë–™–ï–ö–¢\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"üè† –û–±—ä–µ–∫—Ç: {prop.get('project_name')}\n"
                f"üîñ ID –æ–±—ä–µ–∫—Ç–∞: {prop.get('extId') or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}\n"
            )
            if ADMIN_IDS:
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(chat_id=admin_id, text=admin_message)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            await add_request_to_notion(user_name, username, user_id, prop)
            await query.message.reply_text(
                "üßë‚Äçüíº –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.\n\n"
                "–ú—ã –ø–æ–¥–±–µ—Ä—ë–º –¥–ª—è –≤–∞—Å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_back_button()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await query.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_button()
            )
    elif query.data == "download_pdf":
        is_subscribed = TEST_MODE or await is_user_subscribed(query.from_user.id, context)
        if not is_subscribed:
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="download_pdf")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]
            await query.message.reply_text(
                f"‚ùóÔ∏è –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        await query.message.reply_text(
            "‚è≥ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=get_back_button()
        )

        try:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è), —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
            if not os.path.exists(PDF_PATH):
                properties = await get_properties()
                if not properties:
                    await query.message.reply_text(
                        "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞",
                        reply_markup=get_back_button()
                    )
                    return
                await create_catalog_pdf(properties, PDF_PATH)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
            with open(PDF_PATH, "rb") as pdf_file:
                await query.message.reply_document(
                    document=pdf_file,
                    filename="–ö–∞—Ç–∞–ª–æ–≥ PolarProperty.pdf",
                    caption="üìã –í–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º.",
                    reply_markup=get_back_button()
                )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_back_button()
            )
        return
    elif query.data == "menu":
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º start
        try:
            if update.callback_query:
                await update.callback_query.message.delete()
            await start(update, context)
        except BadRequest:
            # await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            await query.message.reply_text("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /start:")
        return
   
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—è–≤–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã)"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = update.message.from_user.username or "–±–µ–∑ username"
    state = user_state.get(user_id)

    if isinstance(state, dict) and state.get("type") == "selection":
        step = state.get("step", 0)
        data = state.get("data", {})
        current_key = SELECTION_STEPS[step]
        user_text = (update.message.text or '').strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —à–∞–≥–µ
        if current_key == 'phone':
            normalized = validate_and_format_phone(user_text)
            if not normalized:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789 –∏–ª–∏ +66968300106",
                    reply_markup=get_back_button()
                )
                return  # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
            data['phone'] = normalized
        else:
            data[current_key] = user_text

        step += 1

        if step < len(SELECTION_QUESTIONS):
            user_state[user_id] = {"step": step, "data": data, "type": "selection"}
            await update.message.reply_text(
                SELECTION_QUESTIONS[step],
                reply_markup=get_back_button()
            )
        else:
            # –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            user_state[user_id] = None
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
            msg = (
                "üì© –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"1Ô∏è‚É£ –ò–º—è: {data.get('name')}\n"
                f"2Ô∏è‚É£ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            )
            await update.message.reply_text(
                "‚úÖ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.",
                reply_markup=get_back_button()
            )
            if ADMIN_IDS:
                try:
                    for admin_id in ADMIN_IDS:
                        await context.bot.send_message(chat_id=admin_id, text=msg)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∞–¥–º–∏–Ω—É: {e}")
            await add_selection_to_notion(user_name, username, user_id, data)
        return

    # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –æ—á–∏—â–∞–µ–º –µ–≥–æ
    if state:
        user_state[user_id] = None
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ ---
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–Ω–µ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞, –¥–∞—ë–º –≤–µ–∂–ª–∏–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    try:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ /start.",
            reply_markup=get_back_button()
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    return

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    print(f"Exception while handling an update: {context.error}")
    print(f"Traceback: {traceback.format_exc()}")

def format_price(price):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏"""
    if price is None:
        return "‚Äî"
    return f"{int(price):,}".replace(",", " ")

def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML"""
    return html.escape(str(text))

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å "+", –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã/—Å–∫–æ–±–∫–∏/–¥–µ—Ñ–∏—Å—ã, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫ "+<digits>"
def validate_and_format_phone(raw):
    try:
        s = str(raw or '').strip()
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        digits = ''.join(ch for ch in s if ch.isdigit())
        has_plus = s.startswith('+')
        if has_plus:
            # + –∏ 8..15 —Ü–∏—Ñ—Ä –ø–æ E.164
            if 8 <= len(digits) <= 15:
                return '+' + digits
            return None
        else:
            # –ë–µ–∑ "+" –¥–æ–ø—É—Å–∫–∞–µ–º 10..15 —Ü–∏—Ñ—Ä, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º, –¥–æ–±–∞–≤–∏–≤ "+"
            if 10 <= len(digits) <= 15:
                return '+' + digits
            return None
    except Exception:
        return None

async def add_request_to_notion(user_name, username, user_id, prop):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É Notion. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∏–¥–∏–º—ã–π ID –æ–±—ä–µ–∫—Ç–∞ (SALE-1 –∏ —Ç.–ø.) –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å."""
    from datetime import datetime
    try:
        ext_id = prop.get('extId') or ''
        notion.pages.create(
            parent={"database_id": NOTION_DATABASE_REQUESTS_ID},
            properties={
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": {"title": [{"text": {"content": user_name}}]},
                "Username": {"rich_text": [{"text": {"content": username}}]},
                "UserID": {"rich_text": [{"text": {"content": str(user_id)}}]},
                "–û–±—ä–µ–∫—Ç": {"rich_text": [{"text": {"content": prop.get('project_name','')}}]},
                "ID –æ–±—ä–µ–∫—Ç–∞": {"rich_text": [{"text": {"content": ext_id}}]},
                "–ò—Å—Ç–æ—á–Ω–∏–∫": {"rich_text": [{"text": {"content": "—Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç"}}]},
                "–¢–∏–ø —Å–¥–µ–ª–∫–∏": {"rich_text": [{"text": {"content": "–ü—Ä–æ–¥–∞–∂–∞"}}]},
                "–î–∞—Ç–∞": {"date": {"start": datetime.now().isoformat()}}
            }
        )
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Notion (extId='{ext_id}')")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Notion: {e}")

def fix_drive_url(url):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Å—ã–ª–∫—É Google Drive –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if not url:
        return url
    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if "drive.google.com/uc?export=view&id=" in url:
        return url
    # –ò—â–µ–º FILE_ID –≤ —Å—Å—ã–ª–∫–µ
    match = re.search(r'drive\.google\.com\/file\/d\/([^\/]+)', url)
    if match:
        file_id = match.group(1)
        return f"https://drive.google.com/uc?export=view&id={file_id}"
    return url

def is_drive_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–∞ Google Drive."""
    return isinstance(url, str) and "drive.google.com" in url

# –ü—Ä–∏–≤–æ–¥–∏—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è pdf.cell
def oneline(text):
    return str(text).replace('\n', ' ').replace('\r', ' ')

async def create_catalog_pdf(properties, pdf_path):
    from fpdf import FPDF
    import os

    # –ö–ª–∞—Å—Å PDF: —É–±–∏—Ä–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∏–∑ —Ñ—É—Ç–µ—Ä–∞
    class CatalogPDF(FPDF):
        def __init__(self, *args, **kwargs):
            self.logo_path = kwargs.pop('logo_path', None)
            super().__init__(*args, **kwargs)
        def footer(self):
            # –õ–æ–≥–æ—Ç–∏–ø –≤–æ —Ñ—É—Ç–µ—Ä–µ –æ—Ç–∫–ª—é—á—ë–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
            pass

    tmp_pages_path = pdf_path + ".tmp_pages.pdf"
    cover_path = "cover.pdf"
    logo_path = "logo_black.png"

    pdf = CatalogPDF(logo_path=logo_path)
    pdf.add_font('DejaVu', '', 'fonts/DejaVuSans.ttf')
    pdf.add_font('DejaVu', 'B', 'fonts/DejaVuSans-Bold.ttf')

    LABEL_WIDTH = 40  # —à–∏—Ä–∏–Ω–∞ —è—á–µ–π–∫–∏ –¥–ª—è –º–µ—Ç–∫–∏

    # –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    header_date = datetime.datetime.now().strftime("%d.%m.%Y")

    def add_field(label, value):
        pdf.set_font('DejaVu', 'B', 11)
        pdf.cell(LABEL_WIDTH, 8, f"{label}:", border=0)
        pdf.set_font('DejaVu', '', 11)
        pdf.cell(0, 8, oneline(value), new_x=XPos.LMARGIN, new_y=YPos.NEXT)

    for idx, prop in enumerate(properties, 1):
        pdf.add_page()
        pdf.set_auto_page_break(True, margin=15)

        # –í–µ—Ä—Ö–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É (–∫—Ä–æ–º–µ –æ–±–ª–æ–∂–∫–∏, –æ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º)
        if os.path.exists(logo_path):
            try:
                logo_w = 130  # –º–º: —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
                logo_h_est = 28  # –º–º: –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ—Ç—Å—Ç—É–ø–∞ –ø–æ–¥ 130 –º–º —à–∏—Ä–∏–Ω—É
                x = (pdf.w - logo_w) / 2
                # –ü–æ–¥–Ω–∏–º–∞–µ–º –ª–æ–≥–æ –Ω–∞ 20 –º–º –≤—ã—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                y = pdf.t_margin - 20
                pdf.image(logo_path, x=x, y=y, w=logo_w)  # –≤—ã—Å–æ—Ç—É –Ω–µ –∑–∞–¥–∞—ë–º ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–∂–Ω—é—é –ø—Ä–∏–≤—è–∑–∫—É –ø–æ–∑–∏—Ü–∏–∏ –∫ –≤—ã—Å–æ—Ç–µ –ª–æ–≥–æ
                # (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º 42 –º–º –æ—Ç –≤–µ—Ä—Ö–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            except Exception:
                # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                pdf.set_y(pdf.t_margin + 20)
        else:
            pdf.set_y(pdf.t_margin + 2)

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ 42 –º–º –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pdf.set_xy(pdf.l_margin, 42)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π (–±–µ–∑ –±—Ä–µ–Ω–¥–∞, –æ–Ω –Ω–∞ –ª–æ–≥–æ—Ç–∏–ø–µ)
        pdf.set_font("DejaVu", 'B', size=12)
        pdf.cell(200, 10, text=f"–ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤ ‚Äî {header_date}", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align="C")
        pdf.ln(6)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        pdf.set_font("DejaVu", 'B', size=12)
        title_line = f"{idx}. {oneline(prop.get('project_name',''))}"
        pdf.cell(0, 10, text=title_line, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        if prop.get('extId'):
            pdf.set_font('DejaVu', '', 9)
            pdf.cell(0, 6, text=f"ID: {oneline(prop['extId'])}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            pdf.ln(1)
        else:
            pdf.ln(3)

        # –§–æ—Ç–æ
        if prop.get("photo_url"):
            import requests
            try:
                img_data = requests.get(prop["photo_url"], timeout=10).content
                img_path = f"temp_img_{idx}.jpg"
                with open(img_path, "wb") as handler:
                    handler.write(img_data)
                try:
                    pdf.image(img_path, w=60)
                except Exception:
                    pass
                os.remove(img_path)
                pdf.ln(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PDF: {e}")
                pdf.ln(5)

        # –ü–æ–ª—è —Å –∂–∏—Ä–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        add_field("–†–∞–π–æ–Ω", prop.get('district','–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        add_field("–°—Ç–∞—Ç—É—Å", prop.get('status','–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        add_field("–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫", prop.get('developer','–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        add_field("–°—Ä–æ–∫ —Å–¥–∞—á–∏", prop.get('enddate','–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

        prices = prop.get('prices', {})
        pdf.set_font('DejaVu', 'B', 11)
        pdf.cell(0, 8, "–¶–µ–Ω—ã:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.set_font('DejaVu', '', 11)
        pdf.cell(0, 8, text=f"   ‚óè  –°—Ç—É–¥–∏—è: –æ—Ç {format_price(prices.get('studio'))} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   ‚óè  1BR: –æ—Ç {format_price(prices.get('1br'))} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   ‚óè  2BR: –æ—Ç {format_price(prices.get('2br'))} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   ‚óè  3BR: –æ—Ç {format_price(prices.get('3br'))} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.cell(0, 8, text=f"   ‚óè  –ü–µ–Ω—Ç—Ö–∞—É—Å: –æ—Ç {format_price(prices.get('penthouse'))} THB", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

        add_field("–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã", prop.get('payments','–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

        pdf.ln(2)
        comments = str(prop.get('comments','')).replace('\r\n', '\n').replace('\r', '\n')
        pdf.set_font('DejaVu', 'B', 11)
        pdf.cell(0, 8, "–û–ø–∏—Å–∞–Ω–∏–µ:", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        pdf.set_font('DejaVu', '', 11)
        pdf.multi_cell(0, 8, comments)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    try:
        pdf.output(tmp_pages_path)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º: –æ–±–ª–æ–∂–∫–∞ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ cover.pdf) + —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        from pypdf import PdfReader, PdfWriter
        writer = PdfWriter()
        if os.path.exists(cover_path):
            try:
                cover_reader = PdfReader(cover_path)
                if len(cover_reader.pages) > 0:
                    writer.add_page(cover_reader.pages[0])
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å cover.pdf: {e}")
        else:
            print("‚ö†Ô∏è –û–±–ª–æ–∂–∫–∞ cover.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥ –±–µ–∑ –Ω–µ—ë")

        try:
            gen_reader = PdfReader(tmp_pages_path)
            for p in gen_reader.pages:
                writer.add_page(p)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
            return

        with open(pdf_path, 'wb') as out_f:
            writer.write(out_f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        # –§–æ–ª–±—ç–∫: –∫–æ–ø–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ –∏—Ç–æ–≥–æ–≤—ã–π PDF
        try:
            import shutil
            if os.path.exists(tmp_pages_path):
                shutil.copyfile(tmp_pages_path, pdf_path)
        except Exception as ee:
            print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –∫–∞—Ç–∞–ª–æ–≥–∞ –±–µ–∑ –æ–±–ª–æ–∂–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: {ee}")
    finally:
        try:
            if os.path.exists(tmp_pages_path):
                os.remove(tmp_pages_path)
        except Exception:
            pass
# --- –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤ Notion ---
async def add_selection_to_notion(user_name, username, user_id, data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω) –≤ —Ç–∞–±–ª–∏—Ü—É Notion"""
    from datetime import datetime
    try:
        notion.pages.create(
            parent={"database_id": NOTION_DATABASE_SELECTIONS_ID},
            properties={
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": {"title": [{"text": {"content": user_name}}]},
                "Username": {"rich_text": [{"text": {"content": username}}]},
                "UserID": {"rich_text": [{"text": {"content": str(user_id)}}]},
                "–ò–º—è": {"rich_text": [{"text": {"content": data.get('name','')}}]},
                "–¢–µ–ª–µ—Ñ–æ–Ω": {"rich_text": [{"text": {"content": data.get('phone','')}}]},
                "–î–∞—Ç–∞": {"date": {"start": datetime.now().isoformat()}}
            }
        )
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Notion")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ Notion: {e}")
PDF_PATH = "catalog.pdf"

async def scheduled_update_pdf():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π PDF –∫–∞—Ç–∞–ª–æ–≥ (–¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    print("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PDF –∫–∞—Ç–∞–ª–æ–≥–∞...")
    properties = await get_properties()
    if properties:
        try:
            await create_catalog_pdf(properties, PDF_PATH)
            print("‚úÖ PDF –∫–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PDF: {e}")
    else:
        print("‚ùå –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è PDF")
        
async def on_startup(app):
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    cleanup_temp_files()
    
    if not TEST_MODE:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π PDF (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è)
        try:
            await scheduled_update_pdf()
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π PDF: {e}")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            scheduler = AsyncIOScheduler(timezone="UTC")
            scheduler.add_job(
                lambda: asyncio.create_task(scheduled_update_pdf()), 
                "cron", 
                day_of_week="mon", 
                hour=10, 
                minute=0
            )
            scheduler.start()
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    else:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PDF –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω—ã")    
# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
def cleanup_temp_files():
    import glob
    try:
        for pattern in ("temp_img_*.jpg", "catalog_*.pdf", "*.tmp_pages.pdf"):
            for file in glob.glob(pattern):
                try:
                    os.remove(file)
                except Exception:
                    pass
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
# --- –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∫–µ—Ç—ã ---
SELECTION_STEPS = [
    "name",
    "phone"
]
SELECTION_QUESTIONS = [
    "1Ô∏è‚É£ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
    "2Ô∏è‚É£ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã)?"
]

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()
    app.add_error_handler(error_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

